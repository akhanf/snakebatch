#---- begin snakebids boilerplate ----------------------------------------------

import snakebids
from snakebids import bids
from pathlib import Path

configfile: workflow.source_path('../config/snakebids.yml')

#set pybids_database_dir to bids/.pybids
config["pybids_db_dir"]=Path(config["bids_dir"]) / Path('.pybids')


# Get input wildcards
inputs = snakebids.generate_inputs(
    bids_dir=config["bids_dir"],
    pybids_inputs=config["pybids_inputs"],
    pybids_database_dir=config.get("pybids_db_dir"),
    pybids_reset_database=config.get("pybids_db_reset"),
    derivatives=config.get("derivatives", None),
    participant_label=config.get("participant_label", None),
    exclude_participant_label=config.get("exclude_participant_label", None),
    use_bids_inputs=True,
)


subj_set_intersection = None
subj_zip_list = None

for bidsinput in config["pybids_inputs"].keys():
   zipl = inputs.input_zip_lists[bidsinput]
   if "session" in zipl:
       # has session, so we have to zip, then use set to remove duplicates
       subj_set = set(zip(zipl["subject"], zipl["session"]))
   else:
       # does not have session, so we can remove duplicates easily by using set
       subj_set = set(zipl["subject"])

   subj_set_intersection = (
       subj_set
       if subj_set_intersection == None
       else subj_set.intersection(subj_set_intersection)
   )

if "session" in zipl:
   (subzip, seszip) = zip(*list(subj_set_intersection))  # zip it up again
   subj_zip_list = {
       "subject": subzip,
       "session": seszip,
   }  # create the new subj_zip_list

else:
   subj_zip_list = {"subject": list(subj_set_intersection)}


subj_wildcards=inputs.subj_wildcards

#this adds constraints to the bids naming
wildcard_constraints:  **snakebids.get_wildcard_constraints(config['pybids_inputs'])

#---- end snakebids boilerplate ------------------------------------------------

def get_targets():
    """ final output files are of the form: {root_folder}/sub-{subject}/ses-{session} """
    targets=list()
    for root in config['root_folders']:
        targets.extend(expand(Path(bids(root=root,**subj_wildcards)).parent,zip,**subj_zip_list))
    return targets

localrules: get_app

rule all:
    input: 
        get_targets()

def get_cmd_retain_outputs_from_tmp(wildcards,resources,output):
    return ' && '.join([f'cp -Rv {resources.tmpdir}/{out} {out}' for out in output]),

def get_session_filter(wildcards):
    if 'session' in wildcards._names:
        return f"--filter-{config['input_to_filter']} session={wildcards.session}"
    else:
        return ''

def get_output_files_folders():
    """ This function is used to select what files to retain, since the 
    app is run on /tmp, and only files listed here will be copied over"""

    output_files_folders=[]
    for root_folder in config['root_folders']:
        output_files_folders.append(directory(Path(bids(root=root_folder,**subj_wildcards)).parent))

    return output_files_folders


rule get_app:
    params:
        url=config['url'],
        tag=config['tag'],
        repo=f"repo_{config['name']}_{config['tag']}",
    output:
        repo=directory(f"repo_{config['name']}_{config['tag']}"),
    shell:
        'git clone {params.url} -b {params.tag} {params.repo}'


rule run_app:
    input:
        repo=f"repo_{config['name']}_{config['tag']}",
        bids=config['bids_dir'],
    params:
        runscript=f"repo_{config['name']}_{config['tag']}/{config['runscript']}",
        app_opts=lambda wildcards: config['opts'],
        singularity_prefix=config['singularity_prefix'],
        retain_outputs_from_tmp=get_cmd_retain_outputs_from_tmp,
        session_filter=get_session_filter
    output:
        get_output_files_folders()
    threads: config['resources']['cores']
    resources: 
        tmpdir=lambda wildcards: bids(root=config['resources']['tmpdir'],**subj_wildcards,include_subject_dir=False,include_session_dir=False).format(**wildcards),
        mem_mb=config['resources']['mem_mb'],
        time=config['resources']['time'],
        gpus=1
    shell: 
        '{params.runscript} {input.bids} {resources.tmpdir} participant '
        '--participant_label {wildcards.subject} {params.session_filter} '
        '-p --cores {threads} --pybidsdb-dir {input.bids}/.pybids {params.app_opts} '
        '--use-singularity --singularity-prefix {params.singularity_prefix} && '
        '{params.retain_outputs_from_tmp} '


