import snakebids
from snakebids import bids
from pathlib import Path


configfile: workflow.source_path("../config/config.yml")


include: "common.smk"


workflow._shadow_prefix = os.environ.get(
    config["defaults"].get("tmpdir_env", "TMPDIR"), None
)
workflow._default_resources.tmpdir = os.environ.get(
    config["defaults"].get("tmpdir_env", "TMPDIR"), None
)


# this adds constraints to the bids naming (not really required for this workflow as is)
wildcard_constraints:
    **snakebids.get_wildcard_constraints(config["defaults"].get("pybids_inputs")),


# collect bids inputs for each dataset
inputs = dict()
subj_wildcards = dict()
bids_intersect = dict()

for dataset in config["datasets"].keys():

    #create symlink to bids
    dataset_path=Path(dataset)
    if not dataset_path.exists():
        dataset_path.mkdir(parents=True)
    bids_path=dataset_path / 'bids'
    if not bids_path.exists():
        bids_path.symlink_to(config["datasets"][dataset]["bids_dir"])


    # parse bids dataset, using dataset input wildcards
    inputs[dataset] = snakebids.generate_inputs(
        bids_dir=bids_path,
        pybids_inputs=config["datasets"][dataset].get(
            "pybids_inputs", config["defaults"].get("pybids_inputs", None)
        ),
        pybidsdb_dir=config["datasets"][dataset].get(
            "pybids_db_dir", config["defaults"].get("pybids_db_dir", None)
        ),
        pybidsdb_reset=config["datasets"][dataset].get(
            "pybids_db_reset", config["defaults"].get("pybids_db_reset", None)
        ),
        derivatives=config["datasets"][dataset].get(
            "derivatives", config["defaults"].get("derivatives", None)
        ),
        participant_label=config["datasets"][dataset].get(
            "participant_label", config["defaults"].get("participant_label", None)
        ),
        exclude_participant_label=config["datasets"][dataset].get(
            "exclude_participant_label",
            config["defaults"].get("exclude_participant_label", None),
        ),
    )

    subj_wildcards[dataset] = inputs[dataset].subj_wildcards

    # get the subjects that have all the bids components (e.g. both t1 and dwi)
    #   we do this by getting the first component, and then filtering with the entities of each additional one..
    comps = list(inputs[dataset].keys())
    bids_intersect[dataset] = inputs[dataset][comps[0]]

    if len(comps) > 0:
        for c in comps[1:]:
            bids_intersect[dataset] = bids_intersect[dataset].filter(
                **inputs[dataset][c].entities[tuple(subj_wildcards[dataset].keys())]
            )


rule all:
    input:
        get_targets(),


for app in config["apps"].keys():

    rule:
        name:
            f"all_{app}"
        input:
            get_targets_by_app(app),


for dataset in config["datasets"].keys():

    rule:
        name:
            f"all_{dataset}"
        input:
            get_targets_by_dataset(dataset),

    def get_out_subj_dirs(app, dataset):
        """This function is used to select what files to retain, since the
        app is run on /tmp, and only files listed here will be copied over"""

        # app overrided wildcards (eg to loop over subject only even if session exists):
        wildcards = {
            wc: f"{{{wc}}}"
            for wc in config["apps"][app].get(
                "wildcards", subj_wildcards[dataset].keys()
            )
        }

        out_subj_dirs = []
        for root_dir in config["apps"][app]["retain_subj_dirs_from"]:
            out_subj_dirs.append(
                directory(
                    Path(f"{{dataset,{dataset}}}/derivatives/{{app,{app}}}")
                    / Path(bids(root=root_dir, **wildcards)).parent
                )
            )

        return out_subj_dirs

    def get_out_additional_files(app, dataset):
        """This function is used to select what files to retain, since when the
        app is run in shadow, only files listed here will be copied over"""

        if "retain_files" not in config["apps"][app]:
            return []

        out_files = []
        for f in config["apps"][app]["retain_files"]:
            out_files.append(
                Path(f"{{dataset,{dataset}}}/derivatives/{{app,{app}}}") / f
            )
        return out_files

    for app in config["apps"].keys():

        rule:
            name:
                f"all_{dataset}_{app}"
            input:
                get_targets_by_app_dataset(app, dataset),

        if "container" in config["apps"][app].keys():

            rule:
                name:
                    f"get_container_{app}"
                container:
                    config["apps"][app]["container"]
                output:
                    f"resources/containers/{app}.sif",
                localrule: True
                shell:
                    "ln -sv $SINGULARITY_CONTAINER {output}"

        rule:
            name:
                f"{dataset}_{app}"
            input:
                **get_dependencies(app, dataset),
                **get_sb_repo(app),
                **get_sb_container(app),
                bids="{dataset}/bids",
            params:
                run_cmd=get_run_cmd,
                app_opts=lambda wildcards: config["apps"][wildcards.app][
                    "opts"
                ].format(**wildcards),
                singularity_opts=get_sb_singularity_opts,
                session_filter=get_session_filter,
                snakebids_opts=get_snakebids_opts,
                bids=get_bids_input,
            output:
                get_out_subj_dirs(app, dataset),
                get_out_additional_files(app, dataset),
            log:
                get_log_file(app, dataset),
            threads: get_threads
            resources:
                mem_mb=lambda wildcards: config["apps"][wildcards.app][
                    "resources"
                ].get("mem_mb", config["defaults"]["resources"]["mem_mb"]),
                runtime=lambda wildcards: config["apps"][wildcards.app][
                    "resources"
                ].get("runtime", config["defaults"]["resources"]["runtime"]),
                gpus=lambda wildcards: config["apps"][wildcards.app]["resources"].get(
                    "gpus", config["defaults"]["resources"]["gpus"]
                ),
            shadow:
                get_shadow(app)
            shell:
                "{params.run_cmd} {params.bids} {wildcards.dataset}/derivatives/{wildcards.app}  participant "
                "--participant_label {wildcards.subject} {params.session_filter} "
                "{params.snakebids_opts} "
                "{params.app_opts} "
                "{params.singularity_opts}"
