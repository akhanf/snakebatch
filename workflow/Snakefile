#---- begin snakebids boilerplate ----------------------------------------------

import snakebids
from snakebids import bids
from pathlib import Path

configfile: workflow.source_path('../config/snakebids.yml')

#set pybids_database_dir to bids/.pybids
config["pybids_db_dir"]=None
#config["pybids_db_dir"]=Path(config["bids_dir"]) / Path('.pybids')


# Get input wildcards
inputs = snakebids.generate_inputs(
    bids_dir=config["bids_dir"],
    pybids_inputs=config["pybids_inputs"],
    pybidsdb_dir=config.get("pybids_db_dir"),
    pybidsdb_reset=config.get("pybids_db_reset"),
    derivatives=config.get("derivatives", None),
    participant_label=config.get("participant_label", None),
    exclude_participant_label=config.get("exclude_participant_label", None),
    use_bids_inputs=True,
)


subj_set_intersection = None
subj_zip_list = None

for bidsinput in config["pybids_inputs"].keys():
   zipl = inputs.input_zip_lists[bidsinput]
   if "session" in zipl:
       # has session, so we have to zip, then use set to remove duplicates
       subj_set = set(zip(zipl["subject"], zipl["session"]))
   else:
       # does not have session, so we can remove duplicates easily by using set
       subj_set = set(zipl["subject"])

   subj_set_intersection = (
       subj_set
       if subj_set_intersection == None
       else subj_set.intersection(subj_set_intersection)
   )

if "session" in zipl:
   (subzip, seszip) = zip(*list(subj_set_intersection))  # zip it up again
   subj_zip_list = {
       "subject": subzip,
       "session": seszip,
   }  # create the new subj_zip_list

else:
   subj_zip_list = {"subject": list(subj_set_intersection)}


subj_wildcards=inputs.subj_wildcards

#this adds constraints to the bids naming
wildcard_constraints:  **snakebids.get_wildcard_constraints(config['pybids_inputs'])

#---- end snakebids boilerplate ------------------------------------------------

def get_targets():
    """ final output files are of the form: {root_folder}/sub-{subject}/ses-{session} """
    targets=list()
    for app in config['sb_apps'].keys():
        for root in config['sb_apps'][app]['root_folders']:
            targets.extend(expand(Path(app)/Path(bids(root=root,**subj_wildcards)).parent,zip,**subj_zip_list))
    return targets

localrules: get_app

rule all:
    input: 
        get_targets()

def get_cmd_retain_outputs_from_tmp(wildcards,resources,output):
    output_files_folders=[]
    for root_folder in config['sb_apps'][wildcards.app]['root_folders']:
        output_files_folders.append(directory(Path(bids(root=root_folder,**subj_wildcards)).parent))
        
    return ' && '.join([f'cp -Rv {resources.tmpdir}/{out} {wildcards.app}/{out}' for out in output_files_folders]),

   
    
def get_session_filter(wildcards):
    input_to_filter = config['sb_apps'][wildcards.app]['input_to_filter']
    if 'session' in wildcards._names:
        return f"--filter-{input_to_filter} session={wildcards.session}"
    else:
        return ''

def get_output_files_folders(app):
    """ This function is used to select what files to retain, since the 
    app is run on /tmp, and only files listed here will be copied over"""

    output_files_folders=[]
    for root_folder in config['sb_apps'][app]['root_folders']:
        output_files_folders.append(directory(Path(f'{{app,{app_name}}}')/Path(bids(root=root_folder,**subj_wildcards)).parent))

    return output_files_folders


rule get_snakebids_app:
    params:
        url=lambda wildcards: config['sb_apps'][wildcards.app]['url'],
        tag=lambda wildcards: config['sb_apps'][wildcards.app]['tag'],
    output:
        repo=directory("repo_{app}"),
    shell:
        'git clone {params.url} -b {params.tag} {output.repo}'

def get_sb_container(app):
    if 'container' in config["sb_apps"][app].keys():
        return {'container': f"containers/{app}.sif" }
    else:
        return {}
 
def get_sb_repo(app):
    if 'url' in config["sb_apps"][app].keys():
        return {'repo': 'repo_{app}'}
    else:
        return {}
        
def get_sb_singularity_opts(wildcards):
    if 'url' in config["sb_apps"][wildcards.app].keys():
        return f"--use-singularity --singularity-prefix {config['singularity_prefix']}"
    else:
        return ""



def get_run_cmd(wildcards, input):
    if 'url' in config["sb_apps"][wildcards.app].keys():
        return f"repo_{wildcards.app}/{config['sb_apps'][wildcards.app]['runscript']}",
    elif 'container' in config["sb_apps"][wildcards.app].keys():

        singularity_opts=config["sb_apps"][wildcards.app].get("singularity_opts","")
            
        if 'runscript' in config["sb_apps"][wildcards.app].keys():
            return f"singularity exec {singularity_opts} {input.container} {input.runscript}"
        else:
            return f'singularity run {singularity_opts} {input.container}'
    else:
        return ""


def get_snakebids_opts(wildcards,input,threads):
    if config["sb_apps"][wildcards.app].get('snakebids',False):
        return f"-p --cores {threads} --pybidsdb-dir {input.bids}/.pybids"
    else:
        return ""

for app_name in config['sb_apps'].keys():

    if 'container' in config['sb_apps'][app_name].keys():
        rule: 
            name: f"get_container_{app_name}"
            container: config["sb_apps"][app_name]['container']
            output: f"containers/{app_name}.sif"
            shell:
                "ln -sv $SINGULARITY_CONTAINER {output}"

    rule:
        name: app_name
        input:
            bids=config['bids_dir'],
            **get_sb_repo(app_name),
            **get_sb_container(app_name),
        params:
            run_cmd=get_run_cmd,
            app_opts=lambda wildcards: config["sb_apps"][wildcards.app]['opts'],
            singularity_opts=get_sb_singularity_opts,
            retain_outputs_from_tmp=get_cmd_retain_outputs_from_tmp,
            session_filter=get_session_filter,
            snakebids_opts=get_snakebids_opts
        output:
            get_output_files_folders(app_name)
        threads: lambda wildcards: config['sb_apps'][wildcards.app]['resources']['cores']
        resources: 
            tmpdir=lambda wildcards: bids(root=config['sb_apps'][wildcards.app]['resources']['tmpdir'],**subj_wildcards,include_subject_dir=False,include_session_dir=False).format(**wildcards),
            mem_mb=lambda wildcards: config['sb_apps'][wildcards.app]['resources']['mem_mb'],
            time=lambda wildcards: config['sb_apps'][wildcards.app]['resources']['time'],
            gpus=lambda wildcards: config['sb_apps'][wildcards.app]['resources']['gpus']
        shell: 
            '{params.run_cmd} {input.bids} {resources.tmpdir} participant '
            '--participant_label {wildcards.subject} {params.session_filter} '
            '{params.snakebids_opts} '
            '{params.app_opts} '
            '{params.singularity_opts} && '
            '{params.retain_outputs_from_tmp}'
        
